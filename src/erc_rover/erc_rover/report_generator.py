# report_generator.py

import os
from PIL import Image
from fpdf import FPDF

class ReportGenerator:
    """
    Generates a PDF report summarizing detected anomalies.
    """
    def __init__(self, output_path: str):
        """
        Initializes the PDF document.

        Args:
            output_path (str): The path to save the final PDF file.
        """
        self.output_path = output_path
        self.pdf = FPDF()
        self.pdf.set_auto_page_break(auto=True, margin=15)
        self._create_title_page()
        print(f"[ReportGenerator] Initialized. Report will be saved to {output_path}.")

    def _create_title_page(self):
        """Creates the first page of the report."""
        self.pdf.add_page()
        self.pdf.set_font("Times", "B", 20)
        self.pdf.cell(0, 15, "Marsyard Anomaly Investigation Report", ln=True, align="C")
        self.pdf.set_font("Times", "", 12)
        self.pdf.ln(10)
        self.pdf.multi_cell(
            0, 
            10, 
            "This document contains an automated analysis of all unique objects detected and tracked "
            "by the perception pipeline during the rover's mission traverse. Each entry includes "
            "a visual capture of the object and a detailed analysis generated by the onboard AI assistant."
        )

    def add_object_entry(self, object_id: int, class_name: str, image_path: str, description: str):
        """
        Adds a new page to the report for a detected object.

        Args:
            object_id (int): The unique ID of the object.
            class_name (str): The class name from GroundingDINO.
            image_path (str): The path to the cropped image of the object.
            description (str): The LLM-generated description of the object.
        """
        self.pdf.add_page()
        self.pdf.set_font("Arial", "B", 16)
        self.pdf.cell(0, 10, f"Anomaly ID: {object_id} (Class: {class_name})", ln=True)
        self.pdf.ln(5)

        # Add image
        try:
            img = Image.open(image_path)
            # Maintain aspect ratio
            img_w, img_h = img.size
            available_w = self.pdf.w - self.pdf.l_margin - self.pdf.r_margin
            ratio = available_w / img_w
            new_w, new_h = available_w, img_h * ratio
            
            # Center the image
            x_pos = (self.pdf.w - new_w) / 2
            self.pdf.image(image_path, x=x_pos, w=new_w, h=new_h)
            self.pdf.ln(new_h + 5) # Add space after image
        except Exception as e:
            self.pdf.set_font("Arial", "I", 10)
            self.pdf.cell(0, 10, f"[Could not load image: {e}]", ln=True)
            print(f"[Error] Could not add image {image_path} to PDF: {e}")


        # Add description
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(0, 10, "AI Analysis:", ln=True)
        self.pdf.set_font("Times", "", 12)
        self.pdf.multi_cell(0, 8, description)
        self.pdf.ln(5)
        print(f"[ReportGenerator] Added object ID {object_id} to the report.")


    def save_report(self):
        """Saves the final PDF file."""
        try:
            self.pdf.output(self.output_path)
            print(f"Report successfully generated at: {self.output_path}")
        except Exception as e:
            print(f"[Error] Failed to save PDF report: {e}")